##
## File            : $File: (normalize_sources.magik) $
## SCM             : $URL$
##
## Copyright       : Realworld Systems
##                   e-mail  : support@realworld-systems.com
##                   address : Venusstraat 17, 4105 JH Culemborg, The Netherlands
##                   tel     : +31(0)345 614406
##                   fax     : +31(0)345 614319
##
## Contains        : normalizes the sources in the
## method_finder, replacing the absolute paths by ones with an
## environment variable
##
##
## Date written    : 2011-07-20
## Date changed    : $Date$
## Revision        : $Rev$

_package user
$

_iter _method method_finder.roos_directories()

  ## Retrieves all directories known to the method_finder.
  ##
  ## This uses the undocumented method_finder command 'list_directories'.

  l_dirs << rope.new()

  method_finder.npr("list_directories")

  (l_count_paths, dummy) << .input.get_line()

  _for i _over 1.upto(l_count_paths.as_number())
  _loop
    (i_dir, dummy) << .input.get_line()
    _loopbody(i_dir)
  _endloop
_endmethod

_method method_finder.roos_change_directory(p_old_directory, p_new_directory)

  ## Instructs the method_finder to change P_OLD_DIRECTORY into
  ## P_NEW_DIRECTORY.
  ##
  ## This uses the undocumented method_finder command 'change_directory'.

  method_finder.npr("change_directory " + p_old_directory + " " + p_new_directory)

_endmethod

_global roos_canonicalise_drive_letter <<
_proc @ roos_canonicalise_drive_letter(p_path)

  ## Canonicalises the drive letter in the given P_PATH. It will guarantee that
  ## the drive letter is lowercase.

  l_canonicalised_path << p_path.copy()

  # poor man's implementation of a drive pattern, such as [A-Za-z]:[\\\\/].*
  _if l_canonicalised_path[1].letter? _andif l_canonicalised_path[2] = %:
  _then
    _if _not l_canonicalised_path[1].ascii_lowercase?
    _then
      l_canonicalised_path[1] << l_canonicalised_path[1].lowercase
    _endif
  _endif
    >> l_canonicalised_path
_endproc

_global normalize_sources <<
_proc @ normalize_sources(mi)

  ## Normalises the paths of all sources beneath the directory pointed to by
  ## the environment variable $PROJECT_DIR. It will replace all absolute paths
  ## with a relative path, which begins with $PROJECT_DIR.
  ##
  ## The class browser of Smallworld honor environment variables in paths given
  ## by the method finder, making it possible to replace absolute paths with
  ## relative paths, which this method does.

  _local l_t << date_time.now()

  l_project_dir << system.canonicalise(system.getenv("PROJECT_DIR"))
  l_orig_path_prefix << roos_canonicalise_drive_letter(l_project_dir)
  l_new_path_prefix << "$PROJECT_DIR"

  # populate list with *our* absolute paths
  l_absolute_paths << rope.new()
  _for i_path _over method_finder.roos_directories()
  _loop
    _if roos_canonicalise_drive_letter(i_path).index_of_seq(l_orig_path_prefix) = 1
    _then
      l_absolute_paths.add(i_path)
    _endif
  _endloop

  # change all accumelated absolute paths into to $PROJECT_DIR + relative path
  _for i_old_path _over l_absolute_paths.fast_elements()
  _loop
    i_new_path << l_new_path_prefix + i_old_path.slice_to_end(l_orig_path_prefix.size + 1)
    method_finder.roos_change_directory(i_old_path, i_new_path)
  _endloop

  write("**** Info: normalized source paths[", l_absolute_paths.size, "] (", date_time.now() - l_t, ")")

_endproc
$
